[
{"apt_name": "Honeybee", "apt_description": "Honeybee is a campaign led by an unknown actor that targets humanitarian aid organizations and has been active in Vietnam, Singapore, Argentina, Japans, Indonesia, and Canada. It has been an active operation since August of 2017 and as recently as February 2018. [1]", "software_item": [{"software_name": "cmd", "software_description": "Command and Scripting Interpreter: Windows Command Shell, File and Directory Discovery, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Lateral Tool Transfer, System Information Discovery"}, {"software_name": "Reg", "software_description": "Modify Registry, Query Registry, Unsecured Credentials: Credentials in Registry"}, {"software_name": "Systeminfo", "software_description": "System Information Discovery"}, {"software_name": "Tasklist", "software_description": "Process Discovery, Software Discovery: Security Software Discovery, System Service Discovery"}]},
{"attack_pattern_name": "Subvert Trust Controls: Code Signing", "attack_pattern_description": "Honeybee uses a dropper called MaoCheng that harvests a stolen digital signature from Adobe Systems.[1]", "attack_pattern_platforms": "Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata", "attack_pattern_detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Process Injection", "attack_pattern_description": "Honeybee uses a batch file to load a DLL into the svchost.exe process.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-640", "attack_pattern_DataSources": "API monitoring, DLL monitoring, File monitoring, Named Pipes, Process monitoring", "attack_pattern_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[36] Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[37] [38] [39] [40] Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.[41] Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "attack_pattern_mitigations": [{"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."}]},
{"attack_pattern_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "attack_pattern_description": "Honeybee uses a combination of NTWDBLIB.dll and cliconfg.exe to bypass UAC protections using DLL hijacking.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows Registry", "attack_pattern_detection": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:The eventvwr.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command Registry key.[6]The sdclt.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and [HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys.[39][40]Analysts should monitor these Registry settings for unauthorized changes.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.[5]"}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Remove users from the local administrator group on systems."}, {"mitigations_name": "Update Software", "mitigations_description": "Consider updating Windows to the latest version and patch level to utilize the latest protective measures against UAC bypass.[5]"}, {"mitigations_name": "User Account Control", "mitigations_description": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."}]},
{"attack_pattern_name": "Modify Registry", "attack_pattern_description": "Honeybee uses a batch file that modifies Registry keys to launch a DLL into the svchost.exe process.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-203", "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring, Windows Registry, Windows event logs", "attack_pattern_detection": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). [80] Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide. [2] Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns [4] and RegDelNull [81].", "attack_pattern_mitigations": [{"mitigations_name": "Restrict Registry Permissions", "mitigations_description": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."}]},
{"attack_pattern_name": "Indicator Removal on Host: File Deletion", "attack_pattern_description": "Honeybee removes batch files to reduce fingerprint on the system as well as deletes the CAB file that gets encoded upon infection.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters", "attack_pattern_detection": "It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Data Staged: Local Data Staging", "attack_pattern_description": "Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Event Triggered Execution: AppCert DLLs", "attack_pattern_description": "Honeybee's service-based DLL implant can execute a downloaded file with parameters specified using CreateProcessAsUser.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Loaded DLLs, Process command-line parameters, Process monitoring, Windows Registry", "attack_pattern_detection": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. [1] Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. [10] [11]Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Adversaries install new AppCertDLL binaries to execute this technique. Identify and block potentially malicious software executed through AppCertDLLs functionality by using application control [2] tools, like Windows Defender Application Control[3], AppLocker, [4] [5] or Software Restriction Policies [6] where appropriate. [7]"}]},
{"attack_pattern_name": "System Services: Service Execution", "attack_pattern_description": "Honeybee launches a DLL file that gets executed as a service using svchost.exe[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows Registry", "attack_pattern_detection": "Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.", "attack_pattern_mitigations": [{"mitigations_name": "Privileged Account Management", "mitigations_description": "Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level."}, {"mitigations_name": "Restrict File and Directory Permissions", "mitigations_description": "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."}]},
{"attack_pattern_name": "Process Discovery", "attack_pattern_description": "Honeybee gathers a list of processes using the tasklist command and then is sent back to the control server.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-573", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Information Discovery", "attack_pattern_description": "Honeybee gathers computer name and information using the systeminfo command.[1]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-312", "attack_pattern_DataSources": "AWS CloudTrail logs, Azure activity logs, Process command-line parameters, Process monitoring, Stackdriver logs", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Deobfuscate/Decode Files or Information", "attack_pattern_description": "Honeybee drops a Word file containing a Base64-encoded file in it that is read, decoded, and dropped to the disk by the macro.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as certutil.Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Automated Exfiltration", "attack_pattern_description": "Honeybee performs data exfiltration is accomplished through the following command-line command: from (- --).txt.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Command and Scripting Interpreter: Visual Basic", "attack_pattern_description": "Honeybee embeds a Visual Basic script within a malicious Word document as part of initial access; the script is executed when the Word document is opened.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Loaded DLLs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can be used to automatically quarantine suspicious files."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Turn off or restrict access to unneeded VB components."}, {"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}]},
{"attack_pattern_name": "File and Directory Discovery", "attack_pattern_description": "Honeybee's service-based DLL implant traverses the FTP server\u2019s directories looking for files with keyword matches for computer names or certain keywords.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Create or Modify System Process: Windows Service", "attack_pattern_description": "Honeybee has batch files that modify the system service COMSysApp to load a malicious DLL.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, File monitoring, Process command-line parameters, Process monitoring, Windows Registry, Windows event logs", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts. Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.[97] Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 [98][99]). New, benign services may be created during installation of new software.Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them."}, {"mitigations_name": "User Account Management", "mitigations_description": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."}]},
{"attack_pattern_name": "Application Layer Protocol: File Transfer Protocols", "attack_pattern_description": "Honeybee uses FTP for command and control.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process monitoring, Process use of network", "attack_pattern_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.[14]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}]},
{"attack_pattern_name": "Archive Collected Data", "attack_pattern_description": "Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.[36]", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "System scans can be performed to identify unauthorized archival utilities."}]},
{"attack_pattern_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "attack_pattern_description": "Honeybee uses a batch file that configures the ComSysApp service to autostart in order to establish persistence.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-270", "attack_pattern_DataSources": "File monitoring, Windows Registry", "attack_pattern_detection": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. [180] Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Data from Local System", "attack_pattern_description": "Honeybee collects data from the local victim system.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Command and Scripting Interpreter: Windows Command Shell", "attack_pattern_description": "Several commands are supported by the Honeybee's implant via the command-line interface and there\u2019s also a utility to execute any custom command on an infected endpoint.[1] Honeybee used batch scripting.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}]},
{"attack_pattern_name": "Obfuscated Files or Information", "attack_pattern_description": "Honeybee drops files with base64-encoded data.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-267", "attack_pattern_DataSources": "Binary file metadata, Email gateway, Environment variable, File monitoring, Malware reverse engineering, Network intrusion detection system, Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network, SSL/TLS inspection, Windows event logs", "attack_pattern_detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. [229] [5] [230] Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10 to analyze commands after being processed/interpreted. [7]"}]}
]