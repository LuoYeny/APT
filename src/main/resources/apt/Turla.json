[
{"apt_name": "Turla", "apt_description": "Turla is a Russian-based threat group that has infected victims in over 45 countries, spanning a range of industries including government, embassies, military, education, research and pharmaceutical companies since 2004. Heightened activity was seen in mid-2015. Turla is known for conducting watering hole and spearphishing campaigns and leveraging in-house tools and malware. Turla\u2019s espionage platform is mainly used against Windows machines, but has also been seen used against macOS and Linux machines. [1] [2] [3] [4]", "software_item": [{"software_name": "Arp", "software_description": "System Network Configuration Discovery"}, {"software_name": "Carbon", "software_description": "Account Discovery: Local Account, Commonly Used Port, Create or Modify System Process: Windows Service, Data Staged: Local Data Staging, Deobfuscate/Decode Files or Information, Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol, Non-Application Layer Protocol, Obfuscated Files or Information, Process Discovery, Process Injection: Dynamic-link Library Injection, Query Registry, Remote System Discovery, Scheduled Task/Job: Scheduled Task, System Network Configuration Discovery, System Network Connections Discovery, System Time Discovery"}, {"software_name": "certutil", "software_description": "Deobfuscate/Decode Files or Information, Ingress Tool Transfer, Subvert Trust Controls: Install Root Certificate"}, {"software_name": "ComRAT", "software_description": "Application Layer Protocol: Web Protocols, Application Layer Protocol: Mail Protocols, Command and Scripting Interpreter: Windows Command Shell, Command and Scripting Interpreter: PowerShell, Deobfuscate/Decode Files or Information, Encrypted Channel: Asymmetric Cryptography, Event Triggered Execution: Component Object Model Hijacking, Hide Artifacts: Hidden File System, Masquerading: Masquerade Task or Service, Modify Registry, Native API, Obfuscated Files or Information, Process Injection: Dynamic-link Library Injection, Query Registry, Scheduled Task/Job: Scheduled Task, Scheduled Transfer, Software Discovery, Web Service: Bidirectional Communication"}, {"software_name": "Empire", "software_description": "Abuse Elevation Control Mechanism: Bypass User Access Control, Access Token Manipulation: Create Process with Token, Access Token Manipulation: SID-History Injection, Access Token Manipulation, Account Discovery: Domain Account, Account Discovery: Local Account, Application Layer Protocol: Web Protocols, Archive Collected Data, Boot or Logon Autostart Execution: Security Support Provider, Boot or Logon Autostart Execution: Shortcut Modification, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Browser Bookmark Discovery, Clipboard Data, Command and Scripting Interpreter: Windows Command Shell, Command and Scripting Interpreter, Command and Scripting Interpreter: PowerShell, Commonly Used Port, Create Account: Local Account, Create Account: Domain Account, Create or Modify System Process: Windows Service, Credentials from Password Stores: Credentials from Web Browsers, Domain Trust Discovery, Email Collection: Local Email Collection, Encrypted Channel: Asymmetric Cryptography, Event Triggered Execution: Accessibility Features, Exfiltration Over C2 Channel, Exfiltration Over Web Service: Exfiltration to Cloud Storage, Exfiltration Over Web Service: Exfiltration to Code Repository, Exploitation for Privilege Escalation, Exploitation of Remote Services, File and Directory Discovery, Group Policy Modification, Hijack Execution Flow: DLL Search Order Hijacking, Hijack Execution Flow: Path Interception by PATH Environment Variable, Hijack Execution Flow: Path Interception by Search Order Hijacking, Hijack Execution Flow: Path Interception by Unquoted Path, Indicator Removal on Host: Timestomp, Ingress Tool Transfer, Input Capture: Keylogging, Input Capture: Credential API Hooking, Man-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay, Native API, Network Service Scanning, Network Share Discovery, Network Sniffing, Obfuscated Files or Information, OS Credential Dumping: LSASS Memory, Process Discovery, Process Injection, Remote Services: Distributed Component Object Model, Remote Services: SSH, Scheduled Task/Job: Scheduled Task, Screen Capture, Software Discovery: Security Software Discovery, Steal or Forge Kerberos Tickets: Golden Ticket, Steal or Forge Kerberos Tickets: Kerberoasting, Steal or Forge Kerberos Tickets: Silver Ticket, System Information Discovery, System Network Configuration Discovery, System Network Connections Discovery, System Services: Service Execution, Trusted Developer Utilities Proxy Execution: MSBuild, Unsecured Credentials: Credentials In Files, Unsecured Credentials: Private Keys, Use Alternate Authentication Material: Pass the Hash, Video Capture, Web Service: Bidirectional Communication, Windows Management Instrumentation"}, {"software_name": "Epic", "software_description": "Account Discovery: Local Account, Application Layer Protocol: Web Protocols, Archive Collected Data: Archive via Library, Archive Collected Data, Encrypted Channel: Symmetric Cryptography, File and Directory Discovery, Indicator Removal on Host: File Deletion, Obfuscated Files or Information, Permission Groups Discovery: Local Groups, Process Discovery, Process Injection: Extra Window Memory Injection, Query Registry, Remote System Discovery, Software Discovery: Security Software Discovery, Subvert Trust Controls: Code Signing, System Information Discovery, System Network Configuration Discovery, System Network Connections Discovery, System Owner/User Discovery, System Service Discovery, System Time Discovery"}, {"software_name": "Gazer", "software_description": "Application Layer Protocol: Web Protocols, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Boot or Logon Autostart Execution: Winlogon Helper DLL, Boot or Logon Autostart Execution: Shortcut Modification, Encrypted Channel: Asymmetric Cryptography, Encrypted Channel: Symmetric Cryptography, Event Triggered Execution: Screensaver, Hide Artifacts: NTFS File Attributes, Indicator Removal on Host: Timestomp, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Obfuscated Files or Information, Process Injection: Thread Execution Hijacking, Process Injection, Scheduled Task/Job: Scheduled Task, Subvert Trust Controls: Code Signing, System Owner/User Discovery"}, {"software_name": "Kazuar", "software_description": "Account Discovery: Local Account, Application Layer Protocol: Web Protocols, Application Layer Protocol: File Transfer Protocols, Application Window Discovery, Boot or Logon Autostart Execution: Shortcut Modification, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Command and Scripting Interpreter: Unix Shell, Command and Scripting Interpreter: Windows Command Shell, Create or Modify System Process: Windows Service, Data Destruction, Data Encoding: Standard Encoding, Data from Local System, Data Staged: Local Data Staging, Fallback Channels, File and Directory Discovery, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Obfuscated Files or Information, Permission Groups Discovery: Local Groups, Process Discovery, Process Injection: Dynamic-link Library Injection, Scheduled Transfer, Screen Capture, System Information Discovery, System Network Configuration Discovery, System Owner/User Discovery, Video Capture, Web Service: Bidirectional Communication, Windows Management Instrumentation"}, {"software_name": "LightNeuron", "software_description": "Application Layer Protocol: Mail Protocols, Archive Collected Data, Automated Collection, Automated Exfiltration, Command and Scripting Interpreter: Windows Command Shell, Data from Local System, Data Manipulation: Transmitted Data Manipulation, Data Obfuscation: Steganography, Data Staged: Local Data Staging, Deobfuscate/Decode Files or Information, Email Collection: Remote Email Collection, Encrypted Channel: Symmetric Cryptography, Exfiltration Over C2 Channel, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Masquerading: Match Legitimate Name or Location, Native API, Obfuscated Files or Information, Scheduled Transfer, Server Software Component: Transport Agent, System Information Discovery, System Network Configuration Discovery"}, {"software_name": "Mimikatz", "software_description": "Access Token Manipulation: SID-History Injection, Account Manipulation, Boot or Logon Autostart Execution: Security Support Provider, Credentials from Password Stores: Credentials from Web Browsers, Credentials from Password Stores, OS Credential Dumping: LSASS Memory, OS Credential Dumping: DCSync, OS Credential Dumping: Security Account Manager, OS Credential Dumping: LSA Secrets, Rogue Domain Controller, Steal or Forge Kerberos Tickets: Silver Ticket, Steal or Forge Kerberos Tickets: Golden Ticket, Unsecured Credentials: Private Keys, Use Alternate Authentication Material: Pass the Hash, Use Alternate Authentication Material: Pass the Ticket"}, {"software_name": "Mosquito", "software_description": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Command and Scripting Interpreter: Windows Command Shell, Command and Scripting Interpreter: PowerShell, Encrypted Channel: Symmetric Cryptography, Event Triggered Execution: Component Object Model Hijacking, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Modify Registry, Native API, Obfuscated Files or Information, Process Discovery, Signed Binary Proxy Execution: Rundll32, Software Discovery: Security Software Discovery, System Network Configuration Discovery, System Owner/User Discovery, Windows Management Instrumentation"}, {"software_name": "nbtstat", "software_description": "System Network Configuration Discovery, System Network Connections Discovery"}, {"software_name": "Net", "software_description": "Account Discovery: Local Account, Account Discovery: Domain Account, Create Account: Local Account, Create Account: Domain Account, Indicator Removal on Host: Network Share Connection Removal, Network Share Discovery, Password Policy Discovery, Permission Groups Discovery: Local Groups, Permission Groups Discovery: Domain Groups, Remote Services: SMB/Windows Admin Shares, Remote System Discovery, System Network Connections Discovery, System Service Discovery, System Services: Service Execution, System Time Discovery"}, {"software_name": "netstat", "software_description": "System Network Connections Discovery"}, {"software_name": "PowerStallion", "software_description": "Command and Scripting Interpreter: PowerShell, Indicator Removal on Host: Timestomp, Obfuscated Files or Information, Process Discovery, Web Service: Bidirectional Communication"}, {"software_name": "PsExec", "software_description": "Lateral Tool Transfer, Remote Services: SMB/Windows Admin Shares, System Services: Service Execution"}, {"software_name": "Reg", "software_description": "Modify Registry, Query Registry, Unsecured Credentials: Credentials in Registry"}, {"software_name": "Systeminfo", "software_description": "System Information Discovery"}, {"software_name": "Tasklist", "software_description": "Process Discovery, Software Discovery: Security Software Discovery, System Service Discovery"}, {"software_name": "Uroburos", "software_description": "Obfuscated Files or Information: Software Packing, Rootkit"}]},
{"attack_pattern_name": "Access Token Manipulation: Create Process with Token", "attack_pattern_description": "Turla RPC backdoors can impersonate or steal process tokens before executing commands.[5]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Access tokens, Process command-line parameters, Process monitoring", "attack_pattern_detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows.[14]If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex) and CreateProcessWithTokenW and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.", "attack_pattern_mitigations": [{"mitigations_name": "Privileged Account Management", "mitigations_description": "Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object. [1] Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.[2]Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas.[3]"}, {"mitigations_name": "User Account Management", "mitigations_description": "An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require."}]},
{"attack_pattern_name": "Phishing: Spearphishing Attachment", "attack_pattern_description": "Turla has used spearphishing emails to deliver BrainTest as a malicious attachment.[9]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-163", "attack_pattern_DataSources": "Detonation chamber, Email gateway, File monitoring, Mail server, Network intrusion detection system, Packet capture", "attack_pattern_detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can also automatically quarantine suspicious files."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments."}, {"mitigations_name": "User Training", "mitigations_description": "Users can be trained to identify social engineering techniques and spearphishing emails."}]},
{"attack_pattern_name": "Peripheral Device Discovery", "attack_pattern_description": "Turla has used fsutil fsinfo drives to list connected drives.[8]", "attack_pattern_platforms": "Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-646", "attack_pattern_DataSources": "API monitoring, PowerShell logs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Process Injection", "attack_pattern_description": "Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-640", "attack_pattern_DataSources": "API monitoring, DLL monitoring, File monitoring, Named Pipes, Process monitoring", "attack_pattern_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[36] Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[37] [38] [39] [40] Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.[41] Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "attack_pattern_mitigations": [{"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."}]},
{"attack_pattern_name": "Query Registry", "attack_pattern_description": "Turla surveys a system upon check-in to discover information in the Windows Registry with the reg query command.[1] Turla has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes .[5]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-647", "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows Registry", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Permission Groups Discovery: Local Groups", "attack_pattern_description": "Turla has used net localgroup and net localgroup Administrators to enumerate group information, including members of the local administrators group.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Proxy", "attack_pattern_description": "Turla RPC backdoors have included local UPnP RPC proxies.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Packet capture, Process monitoring, Process use of network, SSL/TLS inspection", "attack_pattern_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. [2]Consider monitoring for traffic to known anonymity networks (such as Tor).", "attack_pattern_mitigations": [{"mitigations_name": "Filter Network Traffic", "mitigations_description": "Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. [2]"}, {"mitigations_name": "SSL/TLS Inspection", "mitigations_description": "If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting."}]},
{"attack_pattern_name": "Process Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover running processes using the tasklist /v command.[1] Turla RPC backdoors have also enumerated processes associated with specific open ports or named pipes.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-573", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Password Policy Discovery", "attack_pattern_description": "Turla has used net accounts and net accounts /domain to acquire password policy information.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.", "attack_pattern_mitigations": [{"mitigations_name": "Password Policies", "mitigations_description": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\\Windows\\System32\\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages. [3]"}]},
{"attack_pattern_name": "Remote Services: SMB/Windows Admin Shares", "attack_pattern_description": "Turla used net use commands to connect to lateral systems within a network.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-561", "attack_pattern_DataSources": "Authentication logs, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding. [31][32] Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as Net, on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.[33]", "attack_pattern_mitigations": [{"mitigations_name": "Filter Network Traffic", "mitigations_description": "Consider using the host firewall to restrict file sharing communications such as SMB. [4]"}, {"mitigations_name": "Limit Access to Resource Over Network", "mitigations_description": "Consider disabling Windows administrative shares."}, {"mitigations_name": "Password Policies", "mitigations_description": "Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."}]},
{"attack_pattern_name": "Indicator Removal from Tools", "attack_pattern_description": "Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.[2]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Anti-virus, Binary file metadata, Process command-line parameters, Process monitoring", "attack_pattern_detection": "The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Dynamic-link Library Injection", "attack_pattern_description": "Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.[6][10]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, DLL monitoring, File monitoring, Process monitoring", "attack_pattern_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[1]Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "attack_pattern_mitigations": [{"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."}]},
{"attack_pattern_name": "Phishing: Spearphishing Link", "attack_pattern_description": "Turla attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.[4]", "attack_pattern_platforms": "Linux, Office 365, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-163", "attack_pattern_DataSources": "DNS records, Detonation chamber, Email gateway, Mail server, Packet capture, SSL/TLS inspection, Web proxy", "attack_pattern_detection": "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once User Execution occurs.", "attack_pattern_mitigations": [{"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Determine if certain websites that can be used for spearphishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk."}, {"mitigations_name": "User Training", "mitigations_description": "Users can be trained to identify social engineering techniques and spearphishing emails with malicious links."}]},
{"attack_pattern_name": "Obfuscated Files or Information", "attack_pattern_description": "Turla has used encryption (including salted 3DES via PowerSploit's Out-EncryptedScript.ps1), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-267", "attack_pattern_DataSources": "Binary file metadata, Email gateway, Environment variable, File monitoring, Malware reverse engineering, Network intrusion detection system, Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network, SSL/TLS inspection, Windows event logs", "attack_pattern_detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. [229] [5] [230] Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10 to analyze commands after being processed/interpreted. [7]"}]},
{"attack_pattern_name": "System Time Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover the system time by using the net time command.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-295", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Permission Groups Discovery: Domain Groups", "attack_pattern_description": "Turla has used net group \"Domain Admins\" /domain to identify domain administrators.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Service Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-574", "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "User Execution: Malicious Link", "attack_pattern_description": "Turla has used spearphishing via a link to get users to download and run their malware.[4]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Anti-virus, Process monitoring, Web proxy", "attack_pattern_detection": "Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.Anti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files."}, {"mitigations_name": "User Training", "mitigations_description": "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}]},
{"attack_pattern_name": "Software Discovery: Security Software Discovery", "attack_pattern_description": "Turla has obtained information on security software, including security logging information that may indicate whether their malware has been detected.[8]", "attack_pattern_platforms": "AWS, Azure, Azure AD, GCP, Linux, Office 365, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "AWS CloudTrail logs, Azure activity logs, File monitoring, Process command-line parameters, Process monitoring, Stackdriver logs", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Web Service: Bidirectional Communication", "attack_pattern_description": "A Turla JavaScript backdoor has used Google Apps Script as its C2 server.[4][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture, SSL/TLS inspection", "attack_pattern_detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.[37]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}]},
{"attack_pattern_name": "System Network Connections Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.[1][8] Turla RPC backdoors have also enumerated the IPv4 TCP connection table via the GetTcpTable2 API call.[5]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Modify Registry", "attack_pattern_description": "Turla has used the Registry to store encrypted payloads.[5][7]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-203", "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring, Windows Registry, Windows event logs", "attack_pattern_detection": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). [80] Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide. [2] Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns [4] and RegDelNull [81].", "attack_pattern_mitigations": [{"mitigations_name": "Restrict Registry Permissions", "mitigations_description": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."}]},
{"attack_pattern_name": "Ingress Tool Transfer", "attack_pattern_description": "Turla has used shellcode to download Meterpreter after compromising a victim.[6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[1]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.[1]"}]},
{"attack_pattern_name": "Exfiltration Over Web Service: Exfiltration to Cloud Storage", "attack_pattern_description": "Turla has used WebDAV to upload stolen USB files to a cloud drive.[7] Turla has also exfiltrated stolen files to OneDrive and 4shared.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process monitoring, Process use of network, SSL/TLS inspection", "attack_pattern_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.", "attack_pattern_mitigations": [{"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."}]},
{"attack_pattern_name": "Remote System Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands. Turla has also used net group \"Domain Computers\" /domain, net group \"Domain Controllers\" /domain, and net group \"Exchange Servers\" /domain to enumerate domain computers, including the organization's DC and Exchange Server.[1][8]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-292", "attack_pattern_DataSources": "AWS CloudTrail logs, Azure activity logs, Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network, Stackdriver logs", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud environments, the usage of particular commands or APIs to request information about remote systems may be common. Where possible, anomalous usage of these commands and APIs or the usage of these commands and APIs in conjunction with additional unexpected commands may be a sign of malicious use. Logging methods provided by cloud providers that capture history of CLI commands executed or API usage may be utilized for detection.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription", "attack_pattern_description": "Turla has used WMI event filters and consumers to establish persistence.[5]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, WMI Objects", "attack_pattern_detection": "Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence. [15] [16]Monitor processes and command-line arguments that can be used to register WMI persistence, such as the Register-WmiEvent PowerShell cmdlet [17], as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).", "attack_pattern_mitigations": [{"mitigations_name": "Privileged Account Management", "mitigations_description": "Prevent credential overlap across systems of administrator and privileged accounts. [3]"}, {"mitigations_name": "User Account Management", "mitigations_description": "By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI."}]},
{"attack_pattern_name": "System Network Configuration Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, nbtscan, net config, ipconfig /all, and route commands.[1][7][8] Turla RPC backdoors have also retrieved registered RPC interface information from process memory.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-309", "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Lateral Tool Transfer", "attack_pattern_description": "Turla RPC backdoors can be used to transfer files to/from victim machines on the local network.[5][7]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.", "attack_pattern_mitigations": [{"mitigations_name": "Filter Network Traffic", "mitigations_description": "Consider using the host firewall to restrict file sharing communications such as SMB. [2]"}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. [1]"}]},
{"attack_pattern_name": "System Information Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover operating system configuration details using the systeminfo, gpresult, and set commands.[1][8]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-312", "attack_pattern_DataSources": "AWS CloudTrail logs, Azure activity logs, Process command-line parameters, Process monitoring, Stackdriver logs", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "File and Directory Discovery", "attack_pattern_description": "Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent.[1][8] Turla RPC backdoors have also searched for files matching the lPH*.dll pattern.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Drive-by Compromise", "attack_pattern_description": "Turla has infected victims using watering holes.[8]", "attack_pattern_platforms": "Linux, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Network device logs, Network intrusion detection system, Packet capture, Process use of network, SSL/TLS inspection, Web proxy", "attack_pattern_detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.Network intrusion detection systems, sometimes with SSL/TLS MITM inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.[3][4]Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.[4]"}, {"mitigations_name": "Exploit Protection", "mitigations_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. [5] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. [6] Many of these protections depend on the architecture and target application binary for compatibility."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process."}, {"mitigations_name": "Update Software", "mitigations_description": "Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on."}]},
{"attack_pattern_name": "Data from Removable Media", "attack_pattern_description": "Turla RPC backdoors can collect files from USB thumb drives.[5][7]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Event Triggered Execution: PowerShell Profile", "attack_pattern_description": "Turla has used PowerShell profiles to maintain persistence on an infected machine.[5]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, PowerShell logs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Locations where profile.ps1 can be stored should be monitored for new profiles or modifications. [4] Example profile locations include:$PsHome\\Profile.ps1$PsHome\\Microsoft.{{HostProgram}}_profile.ps1$Home\\My Documents\\PowerShell\\Profile.ps1$Home\\My Documents\\PowerShell\\Microsoft.{{HostProgram}}_profile.ps1Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.", "attack_pattern_mitigations": [{"mitigations_name": "Code Signing", "mitigations_description": "Enforce execution of only signed PowerShell scripts. Sign profiles to avoid them from being modified."}, {"mitigations_name": "Restrict File and Directory Permissions", "mitigations_description": "Making PowerShell profiles immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence."}, {"mitigations_name": "Software Configuration", "mitigations_description": "Avoid PowerShell profiles if not needed. Use the -No Profile flag with when executing PowerShell scripts remotely to prevent local profiles and scripts from being executed."}]},
{"attack_pattern_name": "Deobfuscate/Decode Files or Information", "attack_pattern_description": "Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as certutil.Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Data from Information Repositories", "attack_pattern_description": "Turla has used a custom .NET tool to collect documents from an organization's internal central database.[8]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Office 365, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "AWS CloudTrail logs, Application logs, Authentication logs, Azure activity logs, Data loss prevention, OAuth audit logs, Stackdriver logs, Third-party application logs", "attack_pattern_detection": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. [2] The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. [3] Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Consider periodic review of accounts and privileges for critical and sensitive repositories."}, {"mitigations_name": "User Account Management", "mitigations_description": "Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization."}, {"mitigations_name": "User Training", "mitigations_description": "Develop and publish policies that define acceptable information to be stored in repositories."}]},
{"attack_pattern_name": "Credentials from Password Stores", "attack_pattern_description": "Turla has gathered credentials from the Windows Credential Manager tool.[7]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, File monitoring, PowerShell logs, Process monitoring, System calls", "attack_pattern_detection": "Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.", "attack_pattern_mitigations": [{"mitigations_name": "Password Policies", "mitigations_description": "The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password.Organizations may consider weighing the risk of storing credentials in password stores and web browsers. If system, software, or web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in improper locations."}]},
{"attack_pattern_name": "Command and Scripting Interpreter: Visual Basic", "attack_pattern_description": "Turla has used VBS scripts throughout its operations.[7]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Loaded DLLs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can be used to automatically quarantine suspicious files."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Turn off or restrict access to unneeded VB components."}, {"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}]},
{"attack_pattern_name": "Native API", "attack_pattern_description": "Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Loaded DLLs, Process monitoring, System calls", "attack_pattern_detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. Utilization of the Windows API may involve processes loading/accessing system DLLs associated with providing called functions (ex: kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Identify and block potentially malicious software executed that may be executed through this technique by using application control [12] tools, like Windows Defender Application Control[13], AppLocker, [14] [15] or Software Restriction Policies [16] where appropriate. [17]"}]},
{"attack_pattern_name": "Data from Local System", "attack_pattern_description": "Turla RPC backdoors can upload files from victim machines.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Command and Scripting Interpreter: PowerShell", "attack_pattern_description": "Turla has used PowerShell to execute commands/scripts, in some cases via a custom executable or code from Empire's PSInject.[6][5][7] Turla has also used PowerShell scripts to load and execute malware in memory.", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Loaded DLLs, PowerShell logs, Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.Monitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).[3][4]It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). [133] PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.[134] An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can be used to automatically quarantine suspicious files."}, {"mitigations_name": "Code Signing", "mitigations_description": "Set PowerShell execution policy to execute only signed scripts."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions.Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.[6]"}]},
{"attack_pattern_name": "Archive Collected Data: Archive via Utility", "attack_pattern_description": "Turla has encrypted files stolen from connected USB drives into a RAR file before exfiltration.[7]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.[39]", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "System scans can be performed to identify unauthorized archival utilities."}]},
{"attack_pattern_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "attack_pattern_description": "Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion]Winlogon.[4]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-579", "attack_pattern_DataSources": "File monitoring, Process monitoring, Windows Registry", "attack_pattern_detection": "Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. [14] New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Identify and block potentially malicious software that may be executed through the Winlogon helper process by using application control [2] tools like AppLocker [3] [4] that are capable of auditing and/or blocking unknown DLLs."}, {"mitigations_name": "User Account Management", "mitigations_description": "Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes."}]},
{"attack_pattern_name": "Account Discovery: Local Account", "attack_pattern_description": "Turla has used net user to enumerate local accounts on the system.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": [{"mitigations_name": "Operating System Configuration", "mitigations_description": "Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation.[1]"}]},
{"attack_pattern_name": "Brute Force", "attack_pattern_description": "Turla may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.[1]", "attack_pattern_platforms": "AWS, Azure, Azure AD, GCP, Linux, Office 365, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-49", "attack_pattern_DataSources": "Authentication logs, Office 365 account logs", "attack_pattern_detection": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.", "attack_pattern_mitigations": [{"mitigations_name": "Account Use Policies", "mitigations_description": "Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out."}, {"mitigations_name": "Multi-factor Authentication", "mitigations_description": "Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services."}, {"mitigations_name": "Password Policies", "mitigations_description": "Refer to NIST guidelines when creating password policies.[1]"}, {"mitigations_name": "User Account Management", "mitigations_description": "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."}]},
{"attack_pattern_name": "Command and Scripting Interpreter: Windows Command Shell", "attack_pattern_description": "Turla RPC backdoors have used cmd.exe to execute commands.[5][7]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}]},
{"attack_pattern_name": "Account Discovery: Domain Account", "attack_pattern_description": "Turla has used net user /domain to enumerate domain accounts.[8]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-575", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": [{"mitigations_name": "Operating System Configuration", "mitigations_description": "Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation.[1]"}]},
{"attack_pattern_name": "Application Layer Protocol: Web Protocols", "attack_pattern_description": "Turla has used HTTP and HTTPS for C2 communications.[4][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process monitoring, Process use of network", "attack_pattern_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.[195]Monitor for web traffic to/from known-bad or suspicious domains.", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}]},
{"attack_pattern_name": "Impair Defenses: Disable or Modify Tools", "attack_pattern_description": "Turla has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.[5]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-578", "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Services, Windows Registry", "attack_pattern_detection": "Monitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log events may be suspicious.", "attack_pattern_mitigations": [{"mitigations_name": "Restrict File and Directory Permissions", "mitigations_description": "Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security services."}, {"mitigations_name": "Restrict Registry Permissions", "mitigations_description": "Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security services."}, {"mitigations_name": "User Account Management", "mitigations_description": "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."}]},
{"attack_pattern_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "attack_pattern_description": "A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.[4][6]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-270", "attack_pattern_DataSources": "File monitoring, Windows Registry", "attack_pattern_detection": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. [180] Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": []}
]