[
{"apt_name": "APT37", "apt_description": "APT37 is a suspected North Korean cyber espionage group that has been active since at least 2012. The group has targeted victims primarily in South Korea, but also in Japan, Vietnam, Russia, Nepal, China, India, Romania, Kuwait, and other parts of the Middle East. APT37 has also been linked to following campaigns between 2016-2018: Operation Daybreak, Operation Erebus, Golden Time, Evil New Year, Are you Happy?, FreeMilk, Northern Korean Human Rights, and Evil New Year 2018. [1] [2] [3] North Korean group definitions are known to have significant overlap, and the name Lazarus Group is known to encompass a broad range of activity. Some organizations use the name Lazarus Group to refer to any activity attributed to North Korea.[4] Some organizations track North Korean clusters or groups such as Bluenoroff,[5] APT37, and APT38 separately, while other organizations may track some activity associated with those group names by the name Lazarus Group.", "software_item": [{"software_name": "CORALDECK", "software_description": "Archive Collected Data: Archive via Utility, Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol, File and Directory Discovery"}, {"software_name": "DOGCALL", "software_description": "Audio Capture, Ingress Tool Transfer, Input Capture: Keylogging, Obfuscated Files or Information, Screen Capture, Web Service: Bidirectional Communication"}, {"software_name": "Final1stspy", "software_description": "Application Layer Protocol: Web Protocols, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Deobfuscate/Decode Files or Information, Obfuscated Files or Information, Process Discovery, System Information Discovery"}, {"software_name": "HAPPYWORK", "software_description": "Ingress Tool Transfer, System Information Discovery, System Owner/User Discovery"}, {"software_name": "KARAE", "software_description": "Drive-by Compromise, Ingress Tool Transfer, System Information Discovery, Web Service: Bidirectional Communication"}, {"software_name": "NavRAT", "software_description": "Application Layer Protocol: Mail Protocols, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Command and Scripting Interpreter: Windows Command Shell, Data Staged: Local Data Staging, Ingress Tool Transfer, Input Capture: Keylogging, Process Discovery, Process Injection, System Information Discovery"}, {"software_name": "POORAIM", "software_description": "Drive-by Compromise, File and Directory Discovery, Process Discovery, Screen Capture, System Information Discovery, Web Service: Bidirectional Communication"}, {"software_name": "ROKRAT", "software_description": "Application Layer Protocol: Web Protocols, Audio Capture, Credentials from Password Stores: Credentials from Web Browsers, Credentials from Password Stores, Data from Local System, Exfiltration Over C2 Channel, File and Directory Discovery, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Input Capture: Keylogging, Process Discovery, Query Registry, Screen Capture, Software Discovery: Security Software Discovery, System Information Discovery, Virtualization/Sandbox Evasion: System Checks, Web Service: Bidirectional Communication"}, {"software_name": "SHUTTERSPEED", "software_description": "Ingress Tool Transfer, Screen Capture, System Information Discovery"}, {"software_name": "SLOWDRIFT", "software_description": "Ingress Tool Transfer, System Information Discovery, Web Service: Bidirectional Communication"}, {"software_name": "WINERACK", "software_description": "Application Window Discovery, Command and Scripting Interpreter, File and Directory Discovery, Process Discovery, System Information Discovery, System Owner/User Discovery, System Service Discovery"}]},
{"attack_pattern_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "attack_pattern_description": "APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.[6]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows Registry", "attack_pattern_detection": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:The eventvwr.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command Registry key.[6]The sdclt.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and [HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys.[39][40]Analysts should monitor these Registry settings for unauthorized changes.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.[5]"}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Remove users from the local administrator group on systems."}, {"mitigations_name": "Update Software", "mitigations_description": "Consider updating Windows to the latest version and patch level to utilize the latest protective measures against UAC bypass.[5]"}, {"mitigations_name": "User Account Control", "mitigations_description": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."}]},
{"attack_pattern_name": "Process Injection", "attack_pattern_description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-640", "attack_pattern_DataSources": "API monitoring, DLL monitoring, File monitoring, Named Pipes, Process monitoring", "attack_pattern_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[36] Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[37] [38] [39] [40] Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.[41] Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "attack_pattern_mitigations": [{"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."}]},
{"attack_pattern_name": "User Execution: Malicious File", "attack_pattern_description": "APT37 has sent spearphishing attachments attempting to get a user to open them.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Anti-virus, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Application control may be able to prevent the running of executables masquerading as other files."}, {"mitigations_name": "User Training", "mitigations_description": "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}]},
{"attack_pattern_name": "Web Service: Bidirectional Communication", "attack_pattern_description": "APT37 leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.[1][3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture, SSL/TLS inspection", "attack_pattern_detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.[37]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}]},
{"attack_pattern_name": "Native API", "attack_pattern_description": "APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Loaded DLLs, Process monitoring, System calls", "attack_pattern_detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. Utilization of the Windows API may involve processes loading/accessing system DLLs associated with providing called functions (ex: kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Identify and block potentially malicious software executed that may be executed through this technique by using application control [12] tools, like Windows Defender Application Control[13], AppLocker, [14] [15] or Software Restriction Policies [16] where appropriate. [17]"}]},
{"attack_pattern_name": "Subvert Trust Controls: Code Signing", "attack_pattern_description": "APT37 has signed its malware with an invalid digital certificates listed as \"Tencent Technology (Shenzhen) Company Limited.\"[2]", "attack_pattern_platforms": "Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata", "attack_pattern_detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Owner/User Discovery", "attack_pattern_description": "APT37 identifies the victim username.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-577", "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Peripheral Device Discovery", "attack_pattern_description": "APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. [6]", "attack_pattern_platforms": "Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-646", "attack_pattern_DataSources": "API monitoring, PowerShell logs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Shutdown/Reboot", "attack_pattern_description": "APT37 has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Steganography", "attack_pattern_description": "APT37 uses steganography to send images to users that are embedded with shellcode.[3][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata", "attack_pattern_detection": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings are other signatures left in system artifacts related to decoding steganography.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Obfuscated Files or Information", "attack_pattern_description": "APT37 obfuscates strings and payloads.[3][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-267", "attack_pattern_DataSources": "Binary file metadata, Email gateway, Environment variable, File monitoring, Malware reverse engineering, Network intrusion detection system, Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network, SSL/TLS inspection, Windows event logs", "attack_pattern_detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. [229] [5] [230] Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10 to analyze commands after being processed/interpreted. [7]"}]},
{"attack_pattern_name": "Inter-Process Communication: Dynamic Data Exchange", "attack_pattern_description": "APT37 has used Windows DDE for execution of commands and a malicious VBS.[2]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Process monitoring", "attack_pattern_detection": "Monitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe).OLE and Office Open XML files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.[29]", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Ensure Protected View is enabled.[9]"}, {"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs.[10][6]"}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution. [3][1][8] Microsoft also created, and enabled by default, Registry keys to completely disable DDE execution in Word and Excel.[2]"}, {"mitigations_name": "Software Configuration", "mitigations_description": "Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View.[6][8]"}]},
{"attack_pattern_name": "Ingress Tool Transfer", "attack_pattern_description": "APT37 has downloaded second stage malware from compromised websites.[1][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[1]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.[1]"}]},
{"attack_pattern_name": "System Information Discovery", "attack_pattern_description": "APT37 collects the computer name, the BIOS model, and execution path.[3]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-312", "attack_pattern_DataSources": "AWS CloudTrail logs, Azure activity logs, Process command-line parameters, Process monitoring, Stackdriver logs", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Drive-by Compromise", "attack_pattern_description": "APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.[2][1]", "attack_pattern_platforms": "Linux, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Network device logs, Network intrusion detection system, Packet capture, Process use of network, SSL/TLS inspection, Web proxy", "attack_pattern_detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.Network intrusion detection systems, sometimes with SSL/TLS MITM inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.[3][4]Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.[4]"}, {"mitigations_name": "Exploit Protection", "mitigations_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. [5] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. [6] Many of these protections depend on the architecture and target application binary for compatibility."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process."}, {"mitigations_name": "Update Software", "mitigations_description": "Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on."}]},
{"attack_pattern_name": "Audio Capture", "attack_pattern_description": "APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-634", "attack_pattern_DataSources": "API monitoring, File monitoring, Process monitoring", "attack_pattern_detection": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Exploitation for Client Execution", "attack_pattern_description": "APT37 has used Flash Player (CVE-2016-4117, CVE-2018-4878) and Word (CVE-2017-0199) exploits for execution.[2][1][3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Anti-virus, Process monitoring, System calls", "attack_pattern_detection": "Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. [3] [4]Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. Risks of additional exploits and weaknesses in those systems may still exist. [4]"}, {"mitigations_name": "Exploit Protection", "mitigations_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. [1] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. [2] Many of these protections depend on the architecture and target application binary for compatibility."}]},
{"attack_pattern_name": "Credentials from Password Stores: Credentials from Web Browsers", "attack_pattern_description": "APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, File monitoring, PowerShell logs, Process monitoring", "attack_pattern_detection": "Identify web browser files that contain credentials such as Google Chrome\u2019s Login Data database file: AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).", "attack_pattern_mitigations": [{"mitigations_name": "Password Policies", "mitigations_description": "Organizations may consider weighing the risk of storing credentials in web browsers. If web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in web browsers."}]},
{"attack_pattern_name": "Data from Local System", "attack_pattern_description": "APT37 has collected data from victims' local systems.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Command and Scripting Interpreter: Windows Command Shell", "attack_pattern_description": "APT37 has used the command-line interface.[1][3]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}]},
{"attack_pattern_name": "Command and Scripting Interpreter: Visual Basic", "attack_pattern_description": "APT37 executes shellcode and a VBA script to decode Base64 strings.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Loaded DLLs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can be used to automatically quarantine suspicious files."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Turn off or restrict access to unneeded VB components."}, {"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}]},
{"attack_pattern_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "attack_pattern_description": "APT37's has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\.[1][3]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-270", "attack_pattern_DataSources": "File monitoring, Windows Registry", "attack_pattern_detection": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. [180] Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Application Layer Protocol: Web Protocols", "attack_pattern_description": "APT37 uses HTTPS to conceal C2 communications.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process monitoring, Process use of network", "attack_pattern_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.[195]Monitor for web traffic to/from known-bad or suspicious domains.", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}]},
{"attack_pattern_name": "Phishing: Spearphishing Attachment", "attack_pattern_description": "APT37 delivers malware using spearphishing emails with malicious HWP attachments.[1][3][6]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-163", "attack_pattern_DataSources": "Detonation chamber, Email gateway, File monitoring, Mail server, Network intrusion detection system, Packet capture", "attack_pattern_detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can also automatically quarantine suspicious files."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments."}, {"mitigations_name": "User Training", "mitigations_description": "Users can be trained to identify social engineering techniques and spearphishing emails."}]},
{"attack_pattern_name": "Disk Wipe: Disk Structure Wipe", "attack_pattern_description": "APT37 has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).[1][3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Kernel drivers, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Look for attempts to read/write to sensitive locations like the master boot record and the disk partition table. Monitor for direct access read/write attempts using the \\\\.\\ notation.[15] Monitor for unusual kernel driver installation activity.", "attack_pattern_mitigations": [{"mitigations_name": "Data Backup", "mitigations_description": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.[6] Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}]},
{"attack_pattern_name": "Process Discovery", "attack_pattern_description": "APT37's Freenki malware lists running processes using the Microsoft Windows API.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-573", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []}
]