[
{"apt_name": "DarkVishnya", "apt_description": "DarkVishnya is a financially motivated threat actor targeting financial institutions in Eastern Europe. In 2017-2018 the group attacked at least 8 banks in this region.[1]", "software_item": [{"software_name": "PsExec", "software_description": "Lateral Tool Transfer, Remote Services: SMB/Windows Admin Shares, System Services: Service Execution"}, {"software_name": "Winexe", "software_description": "System Services: Service Execution"}]},
{"attack_pattern_name": "Brute Force", "attack_pattern_description": "DarkVishnya used brute-force attack to obtain login data.[1]", "attack_pattern_platforms": "AWS, Azure, Azure AD, GCP, Linux, Office 365, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-49", "attack_pattern_DataSources": "Authentication logs, Office 365 account logs", "attack_pattern_detection": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.", "attack_pattern_mitigations": [{"mitigations_name": "Account Use Policies", "mitigations_description": "Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out."}, {"mitigations_name": "Multi-factor Authentication", "mitigations_description": "Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services."}, {"mitigations_name": "Password Policies", "mitigations_description": "Refer to NIST guidelines when creating password policies.[1]"}, {"mitigations_name": "User Account Management", "mitigations_description": "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."}]},
{"attack_pattern_name": "Command and Scripting Interpreter: PowerShell", "attack_pattern_description": "DarkVishnya used PowerShell to create shellcode loaders.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "DLL monitoring, File monitoring, Loaded DLLs, PowerShell logs, Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.Monitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).[3][4]It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). [133] PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.[134] An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can be used to automatically quarantine suspicious files."}, {"mitigations_name": "Code Signing", "mitigations_description": "Set PowerShell execution policy to execute only signed scripts."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions.Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.[6]"}]},
{"attack_pattern_name": "Remote Access Software", "attack_pattern_description": "DarkVishnya used DameWare Mini Remote Control for lateral movement.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Network intrusion detection system, Network protocol analysis, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.Domain Fronting may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control to mitigate installation and use of unapproved software that can be used for remote access."}, {"mitigations_name": "Filter Network Traffic", "mitigations_description": "Properly configure firewalls, application firewalls, and proxies to limit outgoing traffic to sites and services used by remote access tools."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures may be able to prevent traffic to remote access services."}]},
{"attack_pattern_name": "Network Service Scanning", "attack_pattern_description": "DarkVishnya performed port scanning to obtain the list of active services.[1]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-300", "attack_pattern_DataSources": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.", "attack_pattern_mitigations": [{"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Use network intrusion detection/prevention systems to detect and prevent remote service scans."}, {"mitigations_name": "Network Segmentation", "mitigations_description": "Ensure proper network segmentation is followed to protect critical servers and devices."}]},
{"attack_pattern_name": "Create or Modify System Process: Windows Service", "attack_pattern_description": "DarkVishnya created new services for shellcode loaders distribution.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, File monitoring, Process command-line parameters, Process monitoring, Windows Registry, Windows event logs", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts. Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.[97] Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 [98][99]). New, benign services may be created during installation of new software.Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them."}, {"mitigations_name": "User Account Management", "mitigations_description": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."}]},
{"attack_pattern_name": "Hardware Additions", "attack_pattern_description": "DarkVishnya used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company\u2019s local network.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Asset management, Data loss prevention", "attack_pattern_detection": "Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.", "attack_pattern_mitigations": [{"mitigations_name": "Limit Access to Resource Over Network", "mitigations_description": "Establish network access control policies, such as using device certificates and the 802.1x standard. [6] Restrict use of DHCP to registered devices to prevent unregistered devices from communicating with trusted systems."}, {"mitigations_name": "Limit Hardware Installation", "mitigations_description": "Block unknown devices and accessories by endpoint security configuration and monitoring agent."}]},
{"attack_pattern_name": "Non-Standard Port", "attack_pattern_description": "DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Netflow/Enclave netflow, Packet capture, Process monitoring, Process use of network", "attack_pattern_detection": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.[29]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, {"mitigations_name": "Network Segmentation", "mitigations_description": "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports for that particular network segment."}]},
{"attack_pattern_name": "Network Share Discovery", "attack_pattern_description": "DarkVishnya scanned the network for public shared folders.[1]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-643", "attack_pattern_DataSources": "Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be sufficient due to benign use during normal operations.", "attack_pattern_mitigations": [{"mitigations_name": "Operating System Configuration", "mitigations_description": "Enable Windows Group Policy \"Do Not Allow Anonymous Enumeration of SAM Accounts and Shares\" security setting to limit users who can enumerate network shares.[5]"}]},
{"attack_pattern_name": "Network Sniffing", "attack_pattern_description": "DarkVishnya used network sniffing to obtain login data. [1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-158", "attack_pattern_DataSources": "Host network interface, Netflow/Enclave netflow, Network device logs, Process monitoring", "attack_pattern_detection": "Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.", "attack_pattern_mitigations": [{"mitigations_name": "Encrypt Sensitive Information", "mitigations_description": "Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."}, {"mitigations_name": "Multi-factor Authentication", "mitigations_description": "Use multi-factor authentication wherever possible."}]}
]