[
{"apt_name": "PLATINUM", "apt_description": "PLATINUM is an activity group that has targeted victims since at least 2009. The group has focused on targets associated with governments and related organizations in South and Southeast Asia. [1]", "software_item": [{"software_name": "adbupd", "software_description": "Command and Scripting Interpreter: Windows Command Shell, Encrypted Channel: Asymmetric Cryptography, Event Triggered Execution: Windows Management Instrumentation Event Subscription"}, {"software_name": "Dipsind", "software_description": "Application Layer Protocol: Web Protocols, Boot or Logon Autostart Execution: Winlogon Helper DLL, Command and Scripting Interpreter: Windows Command Shell, Data Encoding: Standard Encoding, Encrypted Channel: Symmetric Cryptography, Ingress Tool Transfer, Scheduled Transfer"}, {"software_name": "JPIN", "software_description": "Application Layer Protocol: File Transfer Protocols, Application Layer Protocol: Mail Protocols, BITS Jobs, Command and Scripting Interpreter: Windows Command Shell, File and Directory Discovery, File and Directory Permissions Modification: Windows File and Directory Permissions Modification, Impair Defenses: Disable or Modify Tools, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Input Capture: Keylogging, Obfuscated Files or Information, Permission Groups Discovery: Local Groups, Process Discovery, Process Injection, Query Registry, Software Discovery: Security Software Discovery, System Information Discovery, System Network Configuration Discovery, System Owner/User Discovery, System Service Discovery"}]},
{"attack_pattern_name": "Drive-by Compromise", "attack_pattern_description": "PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins.[1]", "attack_pattern_platforms": "Linux, SaaS, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Network device logs, Network intrusion detection system, Packet capture, Process use of network, SSL/TLS inspection, Web proxy", "attack_pattern_detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.Network intrusion detection systems, sometimes with SSL/TLS MITM inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.[3][4]Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.[4]"}, {"mitigations_name": "Exploit Protection", "mitigations_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. [5] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. [6] Many of these protections depend on the architecture and target application binary for compatibility."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process."}, {"mitigations_name": "Update Software", "mitigations_description": "Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on."}]},
{"attack_pattern_name": "Phishing: Spearphishing Attachment", "attack_pattern_description": "PLATINUM has sent spearphishing emails with attachments to victims as its primary initial access vector.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-163", "attack_pattern_DataSources": "Detonation chamber, Email gateway, File monitoring, Mail server, Network intrusion detection system, Packet capture", "attack_pattern_detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.", "attack_pattern_mitigations": [{"mitigations_name": "Antivirus/Antimalware", "mitigations_description": "Anti-virus can also automatically quarantine suspicious files."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity."}, {"mitigations_name": "Restrict Web-Based Content", "mitigations_description": "Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments."}, {"mitigations_name": "User Training", "mitigations_description": "Users can be trained to identify social engineering techniques and spearphishing emails."}]},
{"attack_pattern_name": "Exploitation for Privilege Escalation", "attack_pattern_description": "PLATINUM has leveraged a zero-day vulnerability to escalate privileges.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Application logs, Process monitoring, Windows Error Reporting", "attack_pattern_detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution or evidence of Discovery.Higher privileges are often necessary to perform additional actions such as some methods of OS Credential Dumping. Look for additional activity that may indicate an adversary has gained higher privileges.", "attack_pattern_mitigations": [{"mitigations_name": "Application Isolation and Sandboxing", "mitigations_description": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. [3]"}, {"mitigations_name": "Exploit Protection", "mitigations_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. [1] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. [2] Many of these protections depend on the architecture and target application binary for compatibility and may not work for software components targeted for privilege escalation."}, {"mitigations_name": "Threat Intelligence Program", "mitigations_description": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."}, {"mitigations_name": "Update Software", "mitigations_description": "Update software regularly by employing patch management for internal enterprise endpoints and servers."}]},
{"attack_pattern_name": "Input Capture: Keylogging", "attack_pattern_description": "PLATINUM has used several different keyloggers.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-568", "attack_pattern_DataSources": "API monitoring, Process monitoring, Windows Registry", "attack_pattern_detection": "Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsyncKeyState.[1] Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Masquerading: Rename System Utilities", "attack_pattern_description": "PLATINUM has renamed rar.exe to avoid detection.[3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. [2] Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.[9]", "attack_pattern_mitigations": [{"mitigations_name": "Restrict File and Directory Permissions", "mitigations_description": "Use file system access controls to protect folders such as C:\\Windows\\System32."}]},
{"attack_pattern_name": "Ingress Tool Transfer", "attack_pattern_description": "PLATINUM has transferred files using the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel.[2]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[1]", "attack_pattern_mitigations": [{"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.[1]"}]},
{"attack_pattern_name": "User Execution: Malicious File", "attack_pattern_description": "PLATINUM has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Anti-virus, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Application control may be able to prevent the running of executables masquerading as other files."}, {"mitigations_name": "User Training", "mitigations_description": "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}]},
{"attack_pattern_name": "Non-Application Layer Protocol", "attack_pattern_description": "PLATINUM has used the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.[2]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Host network interface, Netflow/Enclave netflow, Network intrusion detection system, Network protocol analysis, Packet capture, Process use of network", "attack_pattern_detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. [27]Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.", "attack_pattern_mitigations": [{"mitigations_name": "Filter Network Traffic", "mitigations_description": "Filter network traffic to prevent use of protocols across the network boundary that are unnecessary."}, {"mitigations_name": "Network Intrusion Prevention", "mitigations_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, {"mitigations_name": "Network Segmentation", "mitigations_description": "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."}]},
{"attack_pattern_name": "Process Injection", "attack_pattern_description": "PLATINUM has used various methods of process injection including hot patching.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-640", "attack_pattern_DataSources": "API monitoring, DLL monitoring, File monitoring, Named Pipes, Process monitoring", "attack_pattern_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[36] Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[37] [38] [39] [40] Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.[41] Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "attack_pattern_mitigations": [{"mitigations_name": "Behavior Prevention on Endpoint", "mitigations_description": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."}]},
{"attack_pattern_name": "Input Capture: Credential API Hooking", "attack_pattern_description": "PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Binary file metadata, DLL monitoring, Loaded DLLs, Process monitoring, Windows event logs", "attack_pattern_detection": "Monitor for calls to the SetWindowsHookEx and SetWinEventHook functions, which install a hook procedure.[2][17] Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools[17][18][19] or by programmatically examining internal kernel structures.[20][21]Rootkits detectors[22] can also be used to monitor for various types of hooking activity.Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes[23] to compare the in-memory IAT to the real addresses of the referenced functions.[24][4]", "attack_pattern_mitigations": []},
{"attack_pattern_name": "OS Credential Dumping: LSASS Memory", "attack_pattern_description": "PLATINUM has used keyloggers that are also capable of dumping credentials.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "PowerShell logs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor for unexpected processes interacting with LSASS.exe.[66] Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,[67] which may require additional logging features to be configured in the operating system to collect necessary information for analysis.", "attack_pattern_mitigations": [{"mitigations_name": "Credential Access Protection", "mitigations_description": "With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements. It also does not protect against all forms of credential dumping.[3][4]"}, {"mitigations_name": "Operating System Configuration", "mitigations_description": "Consider disabling or restricting NTLM.[6] Consider disabling WDigest authentication.[7]"}, {"mitigations_name": "Password Policies", "mitigations_description": "Ensure that local administrator accounts have complex, unique passwords across all systems on the network."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers."}, {"mitigations_name": "Privileged Process Integrity", "mitigations_description": "On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.[5]"}, {"mitigations_name": "User Training", "mitigations_description": "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}]}
]