[
{"apt_name": "APT1", "apt_description": "APT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People\u2019s Liberation Army (PLA) General Staff Department\u2019s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. [1]", "software_item": [{"software_name": "BISCUIT", "software_description": "Command and Scripting Interpreter: Windows Command Shell, Encrypted Channel: Asymmetric Cryptography, Fallback Channels, Ingress Tool Transfer, Input Capture: Keylogging, Process Discovery, Screen Capture, System Information Discovery, System Owner/User Discovery"}, {"software_name": "Cachedump", "software_description": "OS Credential Dumping: Cached Domain Credentials"}, {"software_name": "CALENDAR", "software_description": "Command and Scripting Interpreter: Windows Command Shell, Web Service: Bidirectional Communication"}, {"software_name": "GLOOXMAIL", "software_description": "Web Service: Bidirectional Communication"}, {"software_name": "gsecdump", "software_description": "OS Credential Dumping: Security Account Manager, OS Credential Dumping: LSA Secrets"}, {"software_name": "ipconfig", "software_description": "System Network Configuration Discovery"}, {"software_name": "Lslsass", "software_description": "OS Credential Dumping: LSASS Memory"}, {"software_name": "Mimikatz", "software_description": "Access Token Manipulation: SID-History Injection, Account Manipulation, Boot or Logon Autostart Execution: Security Support Provider, Credentials from Password Stores: Credentials from Web Browsers, Credentials from Password Stores, OS Credential Dumping: LSASS Memory, OS Credential Dumping: DCSync, OS Credential Dumping: Security Account Manager, OS Credential Dumping: LSA Secrets, Rogue Domain Controller, Steal or Forge Kerberos Tickets: Silver Ticket, Steal or Forge Kerberos Tickets: Golden Ticket, Unsecured Credentials: Private Keys, Use Alternate Authentication Material: Pass the Hash, Use Alternate Authentication Material: Pass the Ticket"}, {"software_name": "Net", "software_description": "Account Discovery: Local Account, Account Discovery: Domain Account, Create Account: Local Account, Create Account: Domain Account, Indicator Removal on Host: Network Share Connection Removal, Network Share Discovery, Password Policy Discovery, Permission Groups Discovery: Local Groups, Permission Groups Discovery: Domain Groups, Remote Services: SMB/Windows Admin Shares, Remote System Discovery, System Network Connections Discovery, System Service Discovery, System Services: Service Execution, System Time Discovery"}, {"software_name": "Pass-The-Hash Toolkit", "software_description": "Use Alternate Authentication Material: Pass the Hash"}, {"software_name": "PoisonIvy", "software_description": "Application Window Discovery, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Command and Scripting Interpreter: Windows Command Shell, Create or Modify System Process: Windows Service, Data from Local System, Data Staged: Local Data Staging, Encrypted Channel: Symmetric Cryptography, Ingress Tool Transfer, Input Capture: Keylogging, Modify Registry, Obfuscated Files or Information, Process Injection: Dynamic-link Library Injection, Rootkit"}, {"software_name": "PsExec", "software_description": "Lateral Tool Transfer, Remote Services: SMB/Windows Admin Shares, System Services: Service Execution"}, {"software_name": "pwdump", "software_description": "OS Credential Dumping: Security Account Manager"}, {"software_name": "Seasalt", "software_description": "Application Layer Protocol: Web Protocols, Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, Command and Scripting Interpreter: Windows Command Shell, Create or Modify System Process: Windows Service, File and Directory Discovery, Indicator Removal on Host: File Deletion, Ingress Tool Transfer, Masquerading: Masquerade Task or Service, Obfuscated Files or Information, Process Discovery"}, {"software_name": "Tasklist", "software_description": "Process Discovery, Software Discovery: Security Software Discovery, System Service Discovery"}, {"software_name": "WEBC2", "software_description": "Command and Scripting Interpreter: Windows Command Shell, Hijack Execution Flow: DLL Search Order Hijacking, Ingress Tool Transfer"}, {"software_name": "xCmd", "software_description": "System Services: Service Execution"}]},
{"attack_pattern_name": "Acquire and/or use 3rd party software services", "attack_pattern_description": "APT1 used third party email services in the registration of whois records.[1]", "attack_pattern_platforms": null, "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": null, "attack_pattern_detection": "Easy for the Adversary (Yes/No):&nbspYes Explanation:&nbsp3rd party services like these listed are freely available.", "attack_pattern_mitigations": [{"mitigations_name": "APT1", "mitigations_description": "APT1 used third party email services in the registration of whois records.[3]"}, {"mitigations_name": "Night Dragon", "mitigations_description": "Night Dragon used third party hosting services in the U.S. in an attempt to hide their operations.[2]"}]},
{"attack_pattern_name": "Network Share Discovery", "attack_pattern_description": "APT1 listed connected network shares.[1]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-643", "attack_pattern_DataSources": "Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be sufficient due to benign use during normal operations.", "attack_pattern_mitigations": [{"mitigations_name": "Operating System Configuration", "mitigations_description": "Enable Windows Group Policy \"Do Not Allow Anonymous Enumeration of SAM Accounts and Shares\" security setting to limit users who can enumerate network shares.[5]"}]},
{"attack_pattern_name": "Process Discovery", "attack_pattern_description": "APT1 gathered a list of running processes on the system using tasklist /v.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-573", "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Service Discovery", "attack_pattern_description": "APT1 used the commands net start and tasklist to get a listing of the services on the system.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-574", "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "System Network Configuration Discovery", "attack_pattern_description": "APT1 used the ipconfig /all command to gather network configuration information.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-309", "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Email Collection: Local Email Collection", "attack_pattern_description": "APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Authentication logs, File monitoring, Mail server, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": [{"mitigations_name": "Encrypt Sensitive Information", "mitigations_description": "Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages."}]},
{"attack_pattern_name": "Email Collection: Remote Email Collection", "attack_pattern_description": "APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived.[1]", "attack_pattern_platforms": "Office 365, Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Authentication logs, Email gateway, Mail server, Office 365 trace logs", "attack_pattern_detection": "Monitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account).", "attack_pattern_mitigations": [{"mitigations_name": "Encrypt Sensitive Information", "mitigations_description": "Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages."}, {"mitigations_name": "Multi-factor Authentication", "mitigations_description": "Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries."}]},
{"attack_pattern_name": "Automated Collection", "attack_pattern_description": "APT1 used a batch script to perform a series of discovery techniques and saves it to a text file.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Data loss prevention, File monitoring, Process command-line parameters", "attack_pattern_detection": "Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as Data Staged. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": [{"mitigations_name": "Encrypt Sensitive Information", "mitigations_description": "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means. Strong passwords should be used on certain encrypted documents that use them to prevent offline cracking through Brute Force techniques."}, {"mitigations_name": "Remote Data Storage", "mitigations_description": "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means."}]},
{"attack_pattern_name": "Masquerading: Match Legitimate Name or Location", "attack_pattern_description": "The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware.[1][3]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": "CAPEC-177", "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. [65] Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.[66]", "attack_pattern_mitigations": [{"mitigations_name": "Code Signing", "mitigations_description": "Require signed binaries."}, {"mitigations_name": "Execution Prevention", "mitigations_description": "Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed."}, {"mitigations_name": "Restrict File and Directory Permissions", "mitigations_description": "Use file system access controls to protect folders such as C:\\Windows\\System32."}]},
{"attack_pattern_name": "System Network Connections Discovery", "attack_pattern_description": "APT1 used the net use command to get a listing on network connections.[1]", "attack_pattern_platforms": "AWS, Azure, GCP, Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Data from Local System", "attack_pattern_description": "APT1 has collected files from a local victim.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "OS Credential Dumping: LSASS Memory", "attack_pattern_description": "APT1 has been known to use credential dumping using Mimikatz.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "PowerShell logs, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Monitor for unexpected processes interacting with LSASS.exe.[66] Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,[67] which may require additional logging features to be configured in the operating system to collect necessary information for analysis.", "attack_pattern_mitigations": [{"mitigations_name": "Credential Access Protection", "mitigations_description": "With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements. It also does not protect against all forms of credential dumping.[3][4]"}, {"mitigations_name": "Operating System Configuration", "mitigations_description": "Consider disabling or restricting NTLM.[6] Consider disabling WDigest authentication.[7]"}, {"mitigations_name": "Password Policies", "mitigations_description": "Ensure that local administrator accounts have complex, unique passwords across all systems on the network."}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers."}, {"mitigations_name": "Privileged Process Integrity", "mitigations_description": "On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.[5]"}, {"mitigations_name": "User Training", "mitigations_description": "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}]},
{"attack_pattern_name": "Archive Collected Data: Archive via Utility", "attack_pattern_description": "APT1 has used RAR to compress files before moving them outside of the victim network.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.[39]", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "System scans can be performed to identify unauthorized archival utilities."}]},
{"attack_pattern_name": "Remote Services: Remote Desktop Protocol", "attack_pattern_description": "The APT1 group is known to have used RDP during operations.[2]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-555", "attack_pattern_DataSources": "Authentication logs, Netflow/Enclave netflow, Process monitoring", "attack_pattern_detection": "Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.", "attack_pattern_mitigations": [{"mitigations_name": "Audit", "mitigations_description": "Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups."}, {"mitigations_name": "Disable or Remove Feature or Program", "mitigations_description": "Disable the RDP service if it is unnecessary."}, {"mitigations_name": "Limit Access to Resource Over Network", "mitigations_description": "Use remote desktop gateways."}, {"mitigations_name": "Multi-factor Authentication", "mitigations_description": "Use multi-factor authentication for remote logins.[4]"}, {"mitigations_name": "Network Segmentation", "mitigations_description": "Do not leave RDP accessible from the internet. Enable firewall rules to block RDP traffic between network security zones within a network."}, {"mitigations_name": "Operating System Configuration", "mitigations_description": "Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server.[3]"}, {"mitigations_name": "Privileged Account Management", "mitigations_description": "Consider removing the local Administrators group from the list of groups allowed to log in through RDP."}, {"mitigations_name": "User Account Management", "mitigations_description": "Limit remote user permissions if remote access is necessary."}]},
{"attack_pattern_name": "Command and Scripting Interpreter: Windows Command Shell", "attack_pattern_description": "APT1 has used the Windows command shell to execute commands, and batch scripting to automate execution.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "Process command-line parameters, Process monitoring, Windows event logs", "attack_pattern_detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "attack_pattern_mitigations": [{"mitigations_name": "Execution Prevention", "mitigations_description": "Use application control where appropriate."}]},
{"attack_pattern_name": "Use Alternate Authentication Material: Pass the Hash", "attack_pattern_description": "The APT1 group is known to have used pass the hash.[1]", "attack_pattern_platforms": "Windows", "attack_pattern_CAPEC_ID": "CAPEC-644", "attack_pattern_DataSources": "Authentication logs", "attack_pattern_detection": "Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.", "attack_pattern_mitigations": [{"mitigations_name": "Privileged Account Management", "mitigations_description": "Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems."}, {"mitigations_name": "Update Software", "mitigations_description": "Apply patch KB2871997 to Windows 7 and higher systems to limit the default access of accounts in the local administrator group."}, {"mitigations_name": "User Account Control", "mitigations_description": "Enable pass the hash mitigations to apply UAC restrictions to local accounts on network logon. The associated Registry key is located HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy.Through GPO: Computer Configuration > [Policies] > Administrative Templates > SCM: Pass the Hash Mitigations: Apply UAC restrictions to local accounts on network logons.[2]"}, {"mitigations_name": "User Account Management", "mitigations_description": "Do not allow a domain user to be in the local administrator group on multiple systems."}]},
{"attack_pattern_name": "Obtain/re-use payloads", "attack_pattern_description": "APT1 used publicly available privilege escalation tools.[1]", "attack_pattern_platforms": null, "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": null, "attack_pattern_detection": "Easy for the Adversary (Yes/No):&nbspYes Explanation:&nbspSeveral exploit repositories and tool suites exist for re-use and tailoring.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Account Discovery: Local Account", "attack_pattern_description": "APT1 used the commands net localgroup,net user, and net group to find accounts on the system.[1]", "attack_pattern_platforms": "Linux, Windows, macOS", "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": "API monitoring, Process command-line parameters, Process monitoring", "attack_pattern_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.", "attack_pattern_mitigations": [{"mitigations_name": "Operating System Configuration", "mitigations_description": "Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation.[1]"}]},
{"attack_pattern_name": "Dynamic DNS", "attack_pattern_description": "APT1 used dynamic DNS to register hundreds of FQDNs.[1]", "attack_pattern_platforms": null, "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": null, "attack_pattern_detection": "Easy for the Adversary (Yes/No):&nbspYes Explanation:&nbspIt is relatively easy to subscribe to dynamic DNS providers or find ways to get different IP addresses from a cloud provider.", "attack_pattern_mitigations": [{"mitigations_name": "APT1", "mitigations_description": "APT1 used dynamic DNS to register hundreds of FQDNs.[2]"}]},
{"attack_pattern_name": "Domain registration hijacking", "attack_pattern_description": "APT1 hijacked FQDNs associated with legitimate websites hosted by hop points. Mandiant considers them to be \"hijacked\" since they were originally registered for a legitimate reason but are used by APT1 for malicious purposes.[1]", "attack_pattern_platforms": null, "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": null, "attack_pattern_detection": "Easy for the Adversary (Yes/No):&nbspYes Explanation:&nbspRequires adversary to gain access to an email account for person listed as the domain registrar/POC. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or take advantage of renewal process gaps.", "attack_pattern_mitigations": []},
{"attack_pattern_name": "Compromise 3rd party infrastructure to support delivery", "attack_pattern_description": "APT1 compromised a vast set of 3rd party victim hop points as part of their network infrastructure. For example, APT1 hijacked FQDNs associated with legitimate websites hosted by hop points. Mandiant considers them to be \"hijacked\" since they were originally registered for a legitimate reason but were used by APT1 for malicious purposes.[1]", "attack_pattern_platforms": null, "attack_pattern_CAPEC_ID": null, "attack_pattern_DataSources": null, "attack_pattern_detection": "Easy for the Adversary (Yes/No):&nbspYes Explanation:&nbspCommonly used technique currently (e.g., [https://www.wordpress.com WordPress] sites) as precursor activity to launching attack against intended target (e.g., acquiring botnet or layers of proxies for reducing attribution possibilities).", "attack_pattern_mitigations": [{"mitigations_name": "APT1", "mitigations_description": "APT1 compromised a vast set of 3rd party victim hop points as part of their network infrastructure. For example, APT1 hijacked FQDNs associated with legitimate websites hosted by hop points. Mandiant considers them to be \"hijacked\" since they were originally registered for a legitimate reason but were used by APT1 for malicious purposes.[3]"}]}
]